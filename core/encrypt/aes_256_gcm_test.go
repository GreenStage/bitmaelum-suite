package encrypt

import (
	"github.com/bitmaelum/bitmaelum-suite/internal/message"
	pow "github.com/bitmaelum/bitmaelum-suite/pkg/proofofwork"
	"github.com/stretchr/testify/assert"
	"testing"
)

type TestStruct struct {
	Foo string `json:"foo"`
	Bar int    `json:"bar"`
}

func Test_EncryptDecryptJson(t *testing.T) {
	ts := &TestStruct{
		Foo: "foo",
		Bar: 42,
	}

	// MOck nonce generator for encrypt
	nonceGenerator = func(size int) ([]byte, error) {
		return []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, nil
	}

	// Key we are using to encrypt
	key := []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32}
	// Mock nonce
	// With key and nonce, this should be the encrypted output
	dst := []byte{0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd5, 0xc, 0xca, 0xf2, 0x5f, 0x49, 0x19, 0xcf, 0x9, 0xd2, 0x97, 0x7, 0xcf, 0xd8, 0x5f, 0x44, 0x7b, 0x7c, 0xc8, 0x13, 0x64, 0x8, 0x6e, 0xf2, 0x88, 0x62, 0xb9, 0x25, 0x35, 0x67, 0xe5, 0x63, 0x89, 0xd1, 0x9e, 0x85, 0xd9, 0x6d}

	// Encrypt
	data, err := JSONEncrypt(key, ts)
	assert.Nil(t, err)
	assert.Equal(t, dst, data)

	// Decrypt again
	ts1 := &TestStruct{}
	err = JSONDecrypt(key, data, &ts1)
	assert.Nil(t, err)
	assert.Equal(t, "foo", ts1.Foo)
	assert.Equal(t, 42, ts1.Bar)

	// Validate that another key does not decrypt
	key[0] ^= 80
	ts2 := &TestStruct{}
	err = JSONDecrypt(key, data, &ts2)
	assert.EqualError(t, err, "cipher: message authentication failed")
}

func Test_EncryptDecryptMessage(t *testing.T) {
	ts := "And now you do what they told ya"

	// MOck nonce generator for encrypt
	nonceGenerator = func(size int) ([]byte, error) {
		return []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, nil
	}

	// Key we are using to encrypt
	key := []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32}

	// With key and nonce, this should be the encrypted output
	dst := []byte{0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xef, 0x40, 0xc8, 0xbd, 0x5e, 0x4, 0x54, 0xcd, 0x16, 0xd2, 0x8d, 0x5, 0x87, 0x95, 0x1d, 0x52, 0x61, 0x3f, 0x86, 0x7, 0x22, 0x1d, 0xb4, 0x4b, 0x75, 0x63, 0x1a, 0x27, 0x72, 0x80, 0x5, 0xdd, 0x8a, 0x16, 0x72, 0x8c, 0x2d, 0x98, 0xfa, 0xf6, 0xe5, 0xc1, 0x6, 0x7a, 0xdd, 0x42, 0xae, 0x90}

	// Encrypt
	data, err := MessageEncrypt(key, []byte(ts))
	assert.Nil(t, err)
	assert.Equal(t, dst, data)

	// Decrypt again
	plainText, err := MessageDecrypt(key, data)
	assert.Nil(t, err)
	assert.Equal(t, ts, string(plainText))

	// Validate that another key does not decrypt
	key[0] ^= 80
	_, err = MessageDecrypt(key, data)
	assert.EqualError(t, err, "cipher: message authentication failed")
}

func Test_EncryptDecryptCatalog(t *testing.T) {
	cat := &message.Catalog{
		From: struct {
			Address      string          `json:"address"`
			Name         string          `json:"name"`
			Organisation string          `json:"organisation"`
			ProofOfWork  pow.ProofOfWork `json:"proof_of_work"`
			PublicKey    string          `json:"public_key"`
		}{
			Address:      "bitmaelum!",
			Name:         "Test user",
			Organisation: "BitMaelum",
		},
		ThreadID: "1234",
		Subject:  "Our subject matters",
	}

	// Mock key generator for encrypt
	nonceGenerator = func(size int) ([]byte, error) {
		return []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, nil
	}

	keyGenerator = func() ([]byte, error) {
		return []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32}, nil
	}

	// With key and nonce, this should be the encrypted output
	dst := []byte{0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd5, 0xc, 0xca, 0xef, 0x5f, 0x6, 0x1, 0xd7, 0x14, 0x9f, 0x99, 0x41, 0x87, 0x88, 0x58, 0x56, 0x7a, 0x7c, 0xc8, 0x5, 0x34, 0x1c, 0xa5, 0x5f, 0x34, 0x72, 0x19, 0x3e, 0x7b, 0x81, 0x5e, 0x90, 0xa7, 0xd9, 0x58, 0xda, 0xa8, 0xff, 0xaa, 0x3e, 0xc9, 0x1, 0xf5, 0x77, 0x4, 0x79, 0x15, 0x86, 0xab, 0x21, 0xbf, 0xc9, 0xc5, 0xbf, 0xf0, 0xd3, 0x33, 0x88, 0x56, 0x16, 0x5d, 0xdd, 0xd2, 0x24, 0xd4, 0x9e, 0x52, 0xbc, 0xfa, 0xb6, 0xc8, 0xca, 0x3b, 0x60, 0x12, 0x2, 0x5b, 0x2a, 0x92, 0x2a, 0x9a, 0x36, 0xf, 0x60, 0xd4, 0x28, 0x21, 0x3a, 0x44, 0x77, 0x9a, 0xde, 0x31, 0x49, 0x50, 0x4d, 0xd0, 0x4b, 0x9a, 0xbc, 0x68, 0xb9, 0x52, 0x9b, 0x8d, 0xe5, 0xa6, 0xc1, 0x3e, 0xbf, 0x1c, 0xc2, 0xda, 0x26, 0xe4, 0x97, 0xf2, 0xc2, 0xe7, 0x4f, 0x90, 0xa9, 0xf4, 0xa3, 0x6a, 0x3a, 0xb5, 0xe5, 0xf4, 0x71, 0x8f, 0x4b, 0xe6, 0x90, 0x84, 0x9, 0xaf, 0x6c, 0xa5, 0xd8, 0x2, 0x46, 0x67, 0xb6, 0xde, 0x54, 0x47, 0x11, 0x74, 0xea, 0x1c, 0x33, 0x1e, 0xc, 0x8f, 0x8b, 0x95, 0x3f, 0x20, 0x7e, 0x92, 0x27, 0xb8, 0x29, 0x1e, 0x4b, 0x16, 0xf4, 0xd2, 0xda, 0x3f, 0xed, 0xc2, 0x80, 0xc1, 0xe4, 0x5, 0xd, 0xdf, 0xdc, 0x51, 0x5b, 0x6c, 0x5a, 0x69, 0x88, 0xfb, 0x2f, 0x1, 0x96, 0x5c, 0xe8, 0xb0, 0xcc, 0xf6, 0x72, 0x68, 0xb0, 0x6a, 0xc9, 0x8e, 0xb1, 0xca, 0xd6, 0xa0, 0xcd, 0x74, 0xd9, 0x19, 0xe3, 0x1d, 0x8, 0xc7, 0xa3, 0xc1, 0x7a, 0x49, 0xb1, 0x14, 0x90, 0xa5, 0x12, 0x20, 0xa5, 0xd9, 0x19, 0x82, 0x38, 0xa5, 0x14, 0xf9, 0x86, 0xb8, 0x11, 0xf2, 0x2b, 0x80, 0x5f, 0x3a, 0x5d, 0x68, 0x60, 0x88, 0xef, 0xfd, 0xa8, 0xb4, 0x22, 0x10, 0x64, 0x9a, 0x7, 0xbb, 0xc9, 0xf, 0x1d, 0x52, 0x88, 0x39, 0x4, 0x17, 0x75, 0x7e, 0xf5, 0x2, 0xa0, 0xff, 0x58, 0xe5, 0xfc, 0xb4, 0x9c, 0xfc, 0xc, 0x9d, 0xb1, 0xbe, 0xdb, 0x35, 0xfd, 0x4c, 0x1e, 0x3a, 0xfd, 0x2, 0xd6, 0x3e, 0xc0, 0xc4, 0x1f, 0x97, 0x6d, 0x50, 0x72, 0x5c, 0x7b, 0x31, 0x56, 0xee, 0xbd, 0x2e, 0x98, 0x4d, 0x3f, 0x2f, 0xf, 0x1, 0x24, 0x3c, 0xd6, 0x8e, 0x2c, 0x62, 0xab, 0x62}

	// Encrypt
	key, encCatalog, err := CatalogEncrypt(*cat)
	assert.Nil(t, err)
	dstKey, _ := keyGenerator()
	assert.Equal(t, dstKey, key)
	assert.Equal(t, dst, encCatalog)

	// Decrypt again
	cat2, err := CatalogDecrypt(key, encCatalog)
	assert.Nil(t, err)
	assert.Equal(t, "1234", cat2.ThreadID)

	// Validate that another key does not decrypt
	key[0] ^= 80
	_, err = CatalogDecrypt(key, encCatalog)
	assert.EqualError(t, err, "cipher: message authentication failed")
}
